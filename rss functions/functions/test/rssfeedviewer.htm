<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RSS Feed Viewer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/firebase/9.22.2/firebase-app-compat.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/firebase/9.22.2/firebase-firestore-compat.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/firebase/9.22.2/firebase-auth-compat.min.js"></script>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
      }
      h1 {
        color: #333;
        border-bottom: 1px solid #ccc;
        padding-bottom: 10px;
      }
      .controls {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f5f5f5;
        border-radius: 5px;
        display: none; /* Hide by default until authenticated */
      }
      #categorySelect {
        padding: 8px;
        margin-right: 10px;
        border-radius: 4px;
        border: 1px solid #ccc;
      }
      #loadButton {
        padding: 8px 15px;
        background-color: #4caf50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      #loadButton:hover {
        background-color: #45a049;
      }
      .loading {
        text-align: center;
        padding: 20px;
        font-style: italic;
        color: #666;
      }
      .error {
        color: #d32f2f;
        background-color: #ffebee;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 20px;
      }
      .articles-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
      }
      .article-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }
      .article-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }
      .article-image {
        height: 180px;
        background-color: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
      }
      .article-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      .article-content {
        padding: 15px;
      }
      .article-title {
        margin-top: 0;
        margin-bottom: 10px;
        font-size: 18px;
      }
      .article-source {
        color: #666;
        font-size: 14px;
        margin-bottom: 8px;
      }
      .article-date {
        color: #888;
        font-size: 12px;
        margin-bottom: 10px;
      }
      .article-sentiment {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 12px;
        margin-right: 5px;
      }
      .positive {
        background-color: #e8f5e9;
        color: #2e7d32;
      }
      .negative {
        background-color: #ffebee;
        color: #c62828;
      }
      .neutral {
        background-color: #e0f2f1;
        color: #00796b;
      }
      .article-category {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 12px;
        background-color: #e3f2fd;
        color: #1565c0;
      }
      .debug-info {
        margin-top: 10px;
        padding: 10px;
        background-color: #f5f5f5;
        border-radius: 4px;
        font-size: 12px;
        color: #666;
        white-space: pre-wrap;
        overflow-x: auto;
      }
      #showDebugBtn {
        background: none;
        border: none;
        color: #1976d2;
        cursor: pointer;
        text-decoration: underline;
        padding: 0;
        font-size: 12px;
        margin-top: 5px;
      }
      .auth-container {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f5f5f5;
        border-radius: 5px;
      }
      .auth-form {
        display: flex;
        gap: 10px;
        align-items: center;
      }
      .auth-form input {
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ccc;
      }
      .auth-form button {
        padding: 8px 15px;
        background-color: #2196f3;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      .auth-form button:hover {
        background-color: #1976d2;
      }
    </style>
  </head>
  <body>
    <h1>RSS Feed Viewer</h1>

    <div class="auth-container" id="authContainer">
      <div class="auth-form">
        <input type="email" id="emailInput" placeholder="Email" />
        <input type="password" id="passwordInput" placeholder="Password" />
        <button id="signInButton">Sign In</button>
        <button id="signUpButton">Sign Up</button>
        <button id="signOutButton" style="display: none">Sign Out</button>
      </div>
      <div id="authStatus" style="margin-top: 10px; color: #666"></div>
    </div>

    <div class="controls">
      <select id="categorySelect">
        <option value="all_articles">All Articles</option>
        <option value="technology">Technology</option>
        <option value="business">Business</option>
        <option value="science">Science</option>
        <option value="health">Health</option>
        <option value="politics">Politics</option>
        <option value="entertainment">Entertainment</option>
        <option value="sports">Sports</option>
      </select>
      <button id="loadButton">Load Articles</button>
      <button id="showDebugBtn">Toggle Debug Mode</button>
    </div>

    <div id="status" class="loading" style="display: none">
      Loading articles...
    </div>
    <div id="error" class="error" style="display: none"></div>

    <div id="articles" class="articles-grid"></div>

    <script>
      // Firebase configuration
      const firebaseConfig = {
        apiKey: "AIzaSyCtIB2Aw3NF3Uh6QLGWfv26RS6EFcYVX40",
        authDomain: "news-api-f1a79.firebaseapp.com",
        projectId: "news-api-f1a79",
        storageBucket: "news-api-f1a79.firebasestorage.app",
        messagingSenderId: "497185017222",
        appId: "1:497185017222:web:792e0a0139fcc94d58f007",
      };

      // Initialize Firebase
      firebase.initializeApp(firebaseConfig);
      const db = firebase.firestore();
      const auth = firebase.auth();
      let debugMode = true; // Start with debug mode enabled

      // DOM Elements
      const categorySelect = document.getElementById("categorySelect");
      const loadButton = document.getElementById("loadButton");
      const statusElement = document.getElementById("status");
      const errorElement = document.getElementById("error");
      const articlesContainer = document.getElementById("articles");
      const showDebugBtn = document.getElementById("showDebugBtn");
      const authStatus = document.getElementById("authStatus");
      const emailInput = document.getElementById("emailInput");
      const passwordInput = document.getElementById("passwordInput");
      const signInButton = document.getElementById("signInButton");
      const signUpButton = document.getElementById("signUpButton");
      const signOutButton = document.getElementById("signOutButton");
      const controlsDiv = document.querySelector(".controls");

      // Authentication state observer
      auth.onAuthStateChanged((user) => {
        if (user) {
          authStatus.textContent = `Signed in as ${user.email}`;
          signInButton.style.display = "none";
          signUpButton.style.display = "none";
          signOutButton.style.display = "inline";
          emailInput.style.display = "none";
          passwordInput.style.display = "none";
          controlsDiv.style.display = "block";
          // Load articles automatically when authenticated
          exploreDatabase();
        } else {
          authStatus.textContent = "Not signed in";
          signInButton.style.display = "inline";
          signUpButton.style.display = "inline";
          signOutButton.style.display = "none";
          emailInput.style.display = "inline";
          passwordInput.style.display = "inline";
          controlsDiv.style.display = "none";
          articlesContainer.innerHTML = "";
        }
      });

      // Authentication event handlers
      signInButton.addEventListener("click", async () => {
        const email = emailInput.value;
        const password = passwordInput.value;
        try {
          await auth.signInWithEmailAndPassword(email, password);
          authStatus.textContent = "Signed in successfully!";
          authStatus.style.color = "#4CAF50";
        } catch (error) {
          authStatus.textContent = `Error: ${error.message}`;
          authStatus.style.color = "#f44336";
        }
      });

      signUpButton.addEventListener("click", async () => {
        const email = emailInput.value;
        const password = passwordInput.value;
        try {
          await auth.createUserWithEmailAndPassword(email, password);
          authStatus.textContent =
            "Account created and signed in successfully!";
          authStatus.style.color = "#4CAF50";
        } catch (error) {
          authStatus.textContent = `Error: ${error.message}`;
          authStatus.style.color = "#f44336";
        }
      });

      signOutButton.addEventListener("click", async () => {
        try {
          await auth.signOut();
          authStatus.textContent = "Signed out successfully";
          authStatus.style.color = "#666";
        } catch (error) {
          authStatus.textContent = `Error signing out: ${error.message}`;
          authStatus.style.color = "#f44336";
        }
      });

      // Format date
      function formatDate(timestamp) {
        if (!timestamp) return "Unknown date";

        try {
          // Handle Firestore Timestamp
          const date = timestamp.toDate
            ? timestamp.toDate()
            : new Date(timestamp);
          return new Intl.DateTimeFormat("en-US", {
            year: "numeric",
            month: "short",
            day: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          }).format(date);
        } catch (e) {
          return "Invalid date";
        }
      }

      // Get sentiment class
      function getSentimentClass(sentiment) {
        if (!sentiment) return "neutral";

        const score = sentiment.score || 0;
        if (score > 0.2) return "positive";
        if (score < -0.2) return "negative";
        return "neutral";
      }

      // Get sentiment text
      function getSentimentText(sentiment) {
        if (!sentiment) return "Neutral";

        const score = sentiment.score || 0;
        if (score > 0.2) return "Positive";
        if (score < -0.2) return "Negative";
        return "Neutral";
      }

      // Load articles
      async function loadArticles() {
        const category = categorySelect.value;
        statusElement.style.display = "block";
        errorElement.style.display = "none";
        articlesContainer.innerHTML = "";

        try {
          let articlesRef;

          if (category === "all_articles") {
            // Try different collection paths based on our investigation
            const possiblePaths = [
              // Standard path we tried before
              {
                type: "nested",
                collection: "rss_articles",
                subcollections: [
                  "technology",
                  "business",
                  "science",
                  "health",
                  "politics",
                  "entertainment",
                  "sports",
                ],
              },
              // Alternative path: maybe all articles are in one collection
              { type: "direct", collection: "rss_articles" },
              // Another possibility: articles collection at root
              { type: "direct", collection: "articles" },
              // Try with different casing
              {
                type: "nested",
                collection: "RSS_Articles",
                subcollections: [
                  "technology",
                  "business",
                  "science",
                  "health",
                  "politics",
                  "entertainment",
                  "sports",
                ],
              },
              // Try with categoryML value as document ID
              {
                type: "nested",
                collection: "rss_articles",
                subcollections: [
                  "Technology",
                  "Business",
                  "Science",
                  "Health",
                  "Politics",
                  "Entertainment",
                  "Sports",
                ],
              },
            ];

            let allArticles = [];
            let successPaths = [];

            // Try all possible paths
            for (const path of possiblePaths) {
              if (path.type === "direct") {
                try {
                  const snapshot = await db
                    .collection(path.collection)
                    .limit(50)
                    .get();

                  if (!snapshot.empty) {
                    snapshot.forEach((doc) => {
                      allArticles.push({
                        id: doc.id,
                        ...doc.data(),
                        _path: path.collection,
                      });
                    });
                    successPaths.push(`Direct collection: ${path.collection}`);
                  }
                } catch (e) {
                  console.log(`Error with path ${path.collection}:`, e);
                }
              } else if (path.type === "nested") {
                for (const subCol of path.subcollections) {
                  try {
                    // Try as document -> subcollection
                    const nestedPath = `${path.collection}/${subCol}/articles`;
                    const snapshot = await db
                      .collection(path.collection)
                      .doc(subCol)
                      .collection("articles")
                      .limit(20)
                      .get();

                    if (!snapshot.empty) {
                      snapshot.forEach((doc) => {
                        allArticles.push({
                          id: doc.id,
                          ...doc.data(),
                          _path: nestedPath,
                          _category: subCol,
                        });
                      });
                      successPaths.push(`Nested path: ${nestedPath}`);
                    }

                    // Also try with direct category value as collection name
                    const directCategoryPath = `${path.collection}/${subCol}`;
                    const directSnapshot = await db
                      .collection(path.collection)
                      .doc(subCol)
                      .get();

                    if (directSnapshot.exists) {
                      allArticles.push({
                        id: directSnapshot.id,
                        ...directSnapshot.data(),
                        _path: directCategoryPath,
                        _category: subCol,
                      });
                      successPaths.push(
                        `Direct document: ${directCategoryPath}`
                      );
                    }
                  } catch (e) {
                    console.log(
                      `No articles found for path: ${path.collection}/${subCol}/articles`
                    );
                  }
                }
              }
            }

            if (allArticles.length > 0) {
              // Sort by date if possible
              allArticles.sort((a, b) => {
                const dateA = a.createdAt
                  ? a.createdAt.toDate
                    ? a.createdAt.toDate().getTime()
                    : new Date(a.createdAt).getTime()
                  : 0;
                const dateB = b.createdAt
                  ? b.createdAt.toDate
                    ? b.createdAt.toDate().getTime()
                    : new Date(b.createdAt).getTime()
                  : 0;
                return dateB - dateA;
              });

              // Add success paths to display
              errorElement.textContent = `Found articles in: ${successPaths.join(
                ", "
              )}`;
              errorElement.style.display = "block";
              errorElement.style.color = "#4CAF50";
              errorElement.style.backgroundColor = "#E8F5E9";

              // Display articles
              displayArticles(allArticles);
            } else {
              errorElement.textContent =
                "No articles found in any of the typical database paths.";
              errorElement.style.display = "block";
            }
          } else {
            // Try multiple possible paths for specific category
            const possiblePaths = [
              // Standard path
              { path: `rss_articles/${category}/articles` },
              // Category as collection
              { path: `${category}` },
              // CategoryML may be stored with different casing
              {
                path: `rss_articles/${
                  category.charAt(0).toUpperCase() + category.slice(1)
                }/articles`,
              },
              // Maybe just a flat structure
              { path: `rss_articles` },
              // Or articles at root
              { path: `articles` },
            ];

            let articles = [];
            let foundPath = null;

            // Try each path
            for (const { path } of possiblePaths) {
              try {
                let reference;
                const components = path.split("/");

                if (components.length === 1) {
                  // Direct collection
                  reference = db.collection(components[0]);

                  // For direct collections, try to filter by category if it's the "articles" or "rss_articles" collection
                  if (
                    components[0] === "articles" ||
                    components[0] === "rss_articles"
                  ) {
                    reference = reference.where("categoryML", "==", category);
                  }
                } else if (components.length === 3) {
                  // Collection/Document/Subcollection
                  reference = db
                    .collection(components[0])
                    .doc(components[1])
                    .collection(components[2]);
                }

                const snapshot = await reference.limit(50).get();

                if (!snapshot.empty) {
                  snapshot.forEach((doc) => {
                    articles.push({
                      id: doc.id,
                      ...doc.data(),
                      _path: path,
                    });
                  });
                  foundPath = path;
                  break;
                }
              } catch (e) {
                console.log(`Error with path ${path}:`, e);
              }
            }

            if (articles.length > 0) {
              errorElement.textContent = `Found articles at path: ${foundPath}`;
              errorElement.style.display = "block";
              errorElement.style.color = "#4CAF50";
              errorElement.style.backgroundColor = "#E8F5E9";
              displayArticles(articles);
            } else {
              errorElement.textContent = `No articles found for category: ${category} in any of the typical paths`;
              errorElement.style.display = "block";
            }
          }
        } catch (error) {
          console.error("Error loading articles:", error);
          errorElement.textContent = `Error loading articles: ${error.message}`;
          errorElement.style.display = "block";
        } finally {
          statusElement.style.display = "none";
        }
      }

      // Display articles
      function displayArticles(articles) {
        articlesContainer.innerHTML = "";

        articles.forEach((article) => {
          const card = document.createElement("div");
          card.className = "article-card";

          const hasImage =
            article.imageUrl && article.imageUrl.startsWith("http");

          let imageHtml = "";
          if (hasImage) {
            imageHtml = `
                        <div class="article-image">
                            <img src="${article.imageUrl}" alt="${article.title}" onerror="this.src='https://via.placeholder.com/300x180?text=No+Image'">
                        </div>
                    `;
          } else {
            imageHtml = `
                        <div class="article-image">
                            <img src="https://via.placeholder.com/300x180?text=No+Image" alt="No image available">
                        </div>
                    `;
          }

          let debugHtml = "";
          if (debugMode) {
            debugHtml = `
                        <div class="debug-info">
                            <strong>Image URL:</strong> ${
                              article.imageUrl || "null"
                            }
                            <br>
                            <strong>Document ID:</strong> ${article.id}
                            <br>
                            <strong>Raw Data:</strong> 
                            ${JSON.stringify(
                              article,
                              (key, value) => {
                                if (key === "description")
                                  return "[Content truncated...]";
                                return value;
                              },
                              2
                            )}
                        </div>
                    `;
          }

          card.innerHTML = `
                    ${imageHtml}
                    <div class="article-content">
                        <h3 class="article-title">
                            <a href="${article.link}" target="_blank">${
            article.title
          }</a>
                        </h3>
                        <div class="article-source">${
                          article.source || "Unknown source"
                        }</div>
                        <div class="article-date">${formatDate(
                          article.pubDate || article.createdAt
                        )}</div>
                        <div>
                            <span class="article-sentiment ${getSentimentClass(
                              article.sentiment
                            )}">${getSentimentText(article.sentiment)}</span>
                            <span class="article-category">${
                              article.categoryML || "Uncategorized"
                            }</span>
                        </div>
                        ${debugHtml}
                    </div>
                `;

          articlesContainer.appendChild(card);
        });
      }

      // Add a function to explore Firestore structure
      async function exploreDatabase() {
        statusElement.style.display = "block";
        errorElement.style.display = "none";
        articlesContainer.innerHTML = "";

        try {
          // Get reference to rss_articles collection and its documents
          const rssRef = db.collection("rss_articles");
          const snapshot = await rssRef.limit(10).get();

          let html =
            '<div style="padding: 20px; background-color: #f0f0f0; border-radius: 8px; margin-bottom: 20px;">';
          html += "<h2>RSS Articles Structure</h2>";

          if (snapshot.empty) {
            html += "<p>No documents found in rss_articles collection.</p>";
          } else {
            html += `<p>Found ${snapshot.size} articles (showing up to 10)</p>`;
            html += '<ul style="list-style-type: none; padding-left: 0;">';

            for (const doc of snapshot.docs) {
              const data = doc.data();
              html += `
                <li style="margin-bottom: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; background-color: white;">
                  <strong>Document ID:</strong> ${doc.id}<br>
                  <strong>Path:</strong> ${doc.ref.path}<br>
                  <div style="margin-top: 10px;">
                    <strong>Data:</strong>
                    <pre style="background-color: #f8f8f8; padding: 10px; overflow-x: auto; margin-top: 5px;">
  ${JSON.stringify(data, null, 2)}
                    </pre>
                  </div>
                </li>`;

              // Try to get articles subcollection
              try {
                const articlesRef = doc.ref.collection("articles");
                const articlesSnap = await articlesRef.limit(5).get();

                if (!articlesSnap.empty) {
                  html += `
                    <li style="margin-left: 20px; margin-bottom: 10px;">
                      <strong>Articles Subcollection:</strong> (${articlesSnap.size} documents found)
                      <ul style="list-style-type: none; padding-left: 20px;">`;

                  articlesSnap.forEach((articleDoc) => {
                    const articleData = articleDoc.data();
                    html += `
                      <li style="margin-bottom: 10px; padding: 10px; border: 1px solid #eee; border-radius: 5px;">
                        <strong>Article ID:</strong> ${articleDoc.id}<br>
                        <strong>Title:</strong> ${
                          articleData.title || "No title"
                        }<br>
                        <strong>Date:</strong> ${formatDate(
                          articleData.createdAt
                        )}
                      </li>`;
                  });

                  html += "</ul></li>";
                }
              } catch (e) {
                console.log("Error getting articles subcollection:", e);
              }
            }

            html += "</ul>";
          }

          html += "</div>";
          articlesContainer.innerHTML = html;
        } catch (error) {
          console.error("Error exploring database:", error);
          errorElement.textContent = `Error exploring database: ${error.message}`;
          errorElement.style.display = "block";
        } finally {
          statusElement.style.display = "none";
        }
      }

      // Add a direct collection search function
      async function searchCollection() {
        const collectionPath = prompt("rss_articles/technology/articles");
        if (!collectionPath) return;

        statusElement.style.display = "block";
        errorElement.style.display = "none";
        articlesContainer.innerHTML = "";

        try {
          // Parse the path components
          const pathComponents = collectionPath.split("/");
          let reference;

          if (pathComponents.length === 1) {
            // Simple collection path
            reference = db.collection(pathComponents[0]);
          } else if (pathComponents.length === 3) {
            // Collection > Document > Subcollection
            reference = db
              .collection(pathComponents[0])
              .doc(pathComponents[1])
              .collection(pathComponents[2]);
          } else {
            throw new Error(
              "Invalid path format. Use format: 'collection' or 'collection/document/subcollection'"
            );
          }

          const snapshot = await reference.limit(10).get();

          if (snapshot.empty) {
            errorElement.textContent = `No documents found at path: ${collectionPath}`;
            errorElement.style.display = "block";
          } else {
            let html = `<div style="padding: 20px; background-color: #f0f0f0; border-radius: 8px; margin-bottom: 20px;">
                        <h2>Documents at ${collectionPath}</h2>
                        <p>Found ${snapshot.size} documents (showing up to 10)</p>
                        <ul style="list-style-type: none; padding-left: 0;">`;

            snapshot.forEach((doc) => {
              const data = doc.data();
              html += `<li style="margin-bottom: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                            <strong>Document ID:</strong> ${doc.id}<br>
                            <pre style="background-color: #f8f8f8; padding: 10px; overflow-x: auto; margin-top: 10px;">${JSON.stringify(
                              data,
                              null,
                              2
                            )}</pre>
                        </li>`;
            });

            html += "</ul></div>";
            articlesContainer.innerHTML = html;
          }
        } catch (error) {
          console.error("Error searching collection:", error);
          errorElement.textContent = `Error: ${error.message}`;
          errorElement.style.display = "block";
        } finally {
          statusElement.style.display = "none";
        }
      }

      // Add a try different path button
      const exploreButton = document.createElement("button");
      exploreButton.id = "exploreButton";
      exploreButton.textContent = "Explore Database Structure";
      exploreButton.style.marginLeft = "10px";
      exploreButton.style.padding = "8px 15px";
      exploreButton.style.backgroundColor = "#2196F3";
      exploreButton.style.color = "white";
      exploreButton.style.border = "none";
      exploreButton.style.borderRadius = "4px";
      exploreButton.style.cursor = "pointer";

      const searchButton = document.createElement("button");
      searchButton.id = "searchButton";
      searchButton.textContent = "Search Specific Collection";
      searchButton.style.marginLeft = "10px";
      searchButton.style.padding = "8px 15px";
      searchButton.style.backgroundColor = "#9C27B0";
      searchButton.style.color = "white";
      searchButton.style.border = "none";
      searchButton.style.borderRadius = "4px";
      searchButton.style.cursor = "pointer";

      document.querySelector(".controls").appendChild(exploreButton);
      document.querySelector(".controls").appendChild(searchButton);

      // Event listeners
      loadButton.addEventListener("click", loadArticles);

      showDebugBtn.addEventListener("click", () => {
        debugMode = !debugMode;
        showDebugBtn.textContent = debugMode
          ? "Hide Debug Info"
          : "Toggle Debug Mode";
        loadArticles();
      });

      exploreButton.addEventListener("click", exploreDatabase);
      searchButton.addEventListener("click", searchCollection);

      // Initial load - display database structure
      exploreDatabase();
    </script>
  </body>
</html>
